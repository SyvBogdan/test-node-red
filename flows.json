[
    {
        "id": "999691d3bc673baf",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d2d315e3e7cbb974",
        "type": "http in",
        "z": "999691d3bc673baf",
        "name": "my_test_flow #1 ",
        "url": "/my_test_flow1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "e2838c07cd85af22"
            ]
        ]
    },
    {
        "id": "e2838c07cd85af22",
        "type": "function",
        "z": "999691d3bc673baf",
        "name": "function 1",
        "func": "\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nawait sleep(1)\n\nmsg.payload = {resultOut: 1}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "workerpool",
                "module": "workerpool"
            },
            {
                "var": "workerThreads",
                "module": "worker_threads"
            }
        ],
        "x": 480,
        "y": 160,
        "wires": [
            [
                "b235fbc35ea1698f"
            ]
        ]
    },
    {
        "id": "b235fbc35ea1698f",
        "type": "http response",
        "z": "999691d3bc673baf",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 160,
        "wires": []
    },
    {
        "id": "0bd1975ff12d3233",
        "type": "http in",
        "z": "999691d3bc673baf",
        "name": "my_test_flow30",
        "url": "/my_test_flow30",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "0a769eddaa6e2aa9"
            ]
        ]
    },
    {
        "id": "0a769eddaa6e2aa9",
        "type": "function",
        "z": "999691d3bc673baf",
        "name": "function 2",
        "func": "\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nawait sleep(30)\n\nmsg.payload = {resultOut: 1}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "workerThreads",
                "module": "worker_threads"
            },
            {
                "var": "workerpool",
                "module": "workerpool"
            }
        ],
        "x": 480,
        "y": 320,
        "wires": [
            [
                "275480375549617d"
            ]
        ]
    },
    {
        "id": "275480375549617d",
        "type": "http response",
        "z": "999691d3bc673baf",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "420db44793d130a5",
        "type": "http in",
        "z": "999691d3bc673baf",
        "name": "my_test_flow100",
        "url": "/my_test_flow100",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 500,
        "wires": [
            [
                "1bbd25503be50e5e"
            ]
        ]
    },
    {
        "id": "1bbd25503be50e5e",
        "type": "function",
        "z": "999691d3bc673baf",
        "name": "function 3",
        "func": "\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\n// blocks until IO works nuder the hood \nawait sleep(100)\n\nmsg.payload = {resultOut: 1}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "workerThreads",
                "module": "worker_threads"
            },
            {
                "var": "workerpool",
                "module": "workerpool"
            }
        ],
        "x": 480,
        "y": 500,
        "wires": [
            [
                "0f6e224a8f1d931d"
            ]
        ]
    },
    {
        "id": "0f6e224a8f1d931d",
        "type": "http response",
        "z": "999691d3bc673baf",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 500,
        "wires": []
    },
    {
        "id": "4636a82d3cbd13e3",
        "type": "http in",
        "z": "999691d3bc673baf",
        "name": "my_test_flow1000",
        "url": "/my_test_flow1000",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "7c9138cea5177a69"
            ]
        ]
    },
    {
        "id": "7c9138cea5177a69",
        "type": "function",
        "z": "999691d3bc673baf",
        "name": "function 4",
        "func": "\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function heavyTask() {\n    // Simulate a heavy computation\n    let result = 0;\n    for (let i = 0; i < 1000000000; i++) {\n        result += i;\n    }\n    return result;\n    \n}\nheavyTask()\n\nmsg.payload = {resultOut: 1}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "workerThreads",
                "module": "worker_threads"
            },
            {
                "var": "workerpool",
                "module": "workerpool"
            }
        ],
        "x": 480,
        "y": 660,
        "wires": [
            [
                "b30ec6a0fd66f567"
            ]
        ]
    },
    {
        "id": "b30ec6a0fd66f567",
        "type": "http response",
        "z": "999691d3bc673baf",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 660,
        "wires": []
    },
    {
        "id": "0230a6e7a44b9276",
        "type": "http in",
        "z": "999691d3bc673baf",
        "name": "my_test_flow_heavy_task",
        "url": "my_test_flow_heavy_task",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 840,
        "wires": [
            [
                "5fce39b7389dec68"
            ]
        ]
    },
    {
        "id": "5fce39b7389dec68",
        "type": "function",
        "z": "999691d3bc673baf",
        "name": "function 5",
        "func": "\n// Define a heavy task function that performs a computation with input data\nfunction heavyComputation() {\n    // Simulate a heavy computation\n    let result = 0;\n    for (let i = 0; i < 100000000; i++) {\n        result += 1;\n    }\n    return result;\n}\n\n\n//perform computation  // without blocking main thread to execute \nconst result = await heavyComputation ()\n\n//const result = await heavyComputation()\n    \nmsg.payload = { resultOut: result }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "workerThreads",
                "module": "worker_threads"
            },
            {
                "var": "workerpool",
                "module": "workerpool"
            }
        ],
        "x": 480,
        "y": 840,
        "wires": [
            [
                "ab9c1b459f4065b5"
            ]
        ]
    },
    {
        "id": "ab9c1b459f4065b5",
        "type": "http response",
        "z": "999691d3bc673baf",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 840,
        "wires": []
    },
    {
        "id": "f1ee6e8bc0e22b37",
        "type": "http in",
        "z": "999691d3bc673baf",
        "name": "pool_my_test_flow_heavy_task",
        "url": "/pool/my_test_flow_heavy_task",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 980,
        "wires": [
            [
                "88c3c1349bb72276"
            ]
        ]
    },
    {
        "id": "88c3c1349bb72276",
        "type": "function",
        "z": "999691d3bc673baf",
        "name": "function 6",
        "func": "const pool = global.get(\"globalWorkerPool\")\n// Define a heavy task function that performs a computation with input data\n// this operation do not block but performs long-run execution\nfunction heavyComputation(data) {\n    // Simulate a heavy computation\n    let result = 0;\n    for (let i = 0; i < 100000000; i++) {\n        result += 1;\n    }\n    return result;\n}\n\nasync function asyncCompute() {\n\n    return  pool\n        .exec(heavyComputation, [\"msg\"])\n        .then(async function init(input) {\n            return input;\n        });\n\n}\n\n//perform computation  // without blocking main thread to execute \nconst result = await asyncCompute()\n\n//const result = await heavyComputation()\n\nmsg.payload = { resultOut: result }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "workerThreads",
                "module": "worker_threads"
            },
            {
                "var": "workerpool",
                "module": "workerpool"
            }
        ],
        "x": 480,
        "y": 980,
        "wires": [
            [
                "ea79011ffc7614ab"
            ]
        ]
    },
    {
        "id": "ea79011ffc7614ab",
        "type": "http response",
        "z": "999691d3bc673baf",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 980,
        "wires": []
    },
    {
        "id": "9b52e80d13d3bbc9",
        "type": "http in",
        "z": "999691d3bc673baf",
        "name": "pool_and_block_my_test_flow_heavy_task",
        "url": "/pool_and_block/my_test_flow_heavy_task",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "46a8773968350567"
            ]
        ]
    },
    {
        "id": "46a8773968350567",
        "type": "function",
        "z": "999691d3bc673baf",
        "name": "function 7",
        "func": "const pool = global.get(\"globalWorkerPool\")\n// We simulate  heavy task function that performs a computation with input data\n// this operation do not block but performs long-run execution\nfunction heavyComputation(data) {\n    // Simulate a heavy computation\n    let result = 0;\n    for (let i = 0; i < 1000000; i++) {\n        result += 1;\n    }\n    return result;\n}\n\n// we simulate IO operation to socket\nfunction sleep(ms) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, ms);\n    });\n}\n\nasync function asyncCompute() {\n\n    return  pool\n        .exec(heavyComputation, [\"msg\"])\n        .then(async function init(input) {\n            return input;\n        });\n\n}\n\n//perform heavy computation  // without blocking main thread to execute \nconst result = await asyncCompute()\n\n//perform non blocking IO(without blocking main thread to wait here all the time)\n\nawait sleep(30)\n\n//const result = await heavyComputation()\n\nmsg.payload = { resultOut: result }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "workerThreads",
                "module": "worker_threads"
            },
            {
                "var": "workerpool",
                "module": "workerpool"
            }
        ],
        "x": 480,
        "y": 1080,
        "wires": [
            [
                "032658db9a6ef352"
            ]
        ]
    },
    {
        "id": "032658db9a6ef352",
        "type": "http response",
        "z": "999691d3bc673baf",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 1080,
        "wires": []
    }
]